/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package WeatherWear;

import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import net.aksingh.owmjapis.core.OWM;
import net.aksingh.owmjapis.api.APIException;
import net.aksingh.owmjapis.model.CurrentWeather;

/**
 *
 * @author sdzar
 */
public class WeatherWearGUI extends javax.swing.JFrame {

    /**
     * Creates new form WeatherWearGUI
     */
    private final String KEY = "156b77ca1f98f37be98062d7f5379f6b";
    OWM owm = new OWM(KEY);
    static boolean maximized = true;
    static ImageIcon ii;
    Location WestLafayette = new Location("US", "IN", new City("West Lafayette", 4928096, "47906"));
    Location Indianapolis = new Location("US", "IN", new City("Indianapolis", 4259418, "46201"));
    Location Chicago = new Location("US", "IL", new City("Chicago", 4887398, "60007"));
    Location LosAngeles = new Location("US", "CA", new City("Los Angeles", 5344994, "91001"));
    Location Paris = new Location("FR", "IN", new City("Paris", 6269531, "75000"));
    Location Kathmandu = new Location("NP", "Province No. 3", new City("Kathmandu", 1283240, "44600"));
    City city;
    Weather weather = new Weather();
    Precipitation precipitation;
    Rain rain;
    Snow snow;
    Drizzle drizzle;
    Thunderstorm thunderstorm;
    Atmosphere atmosphere;
    Wind wind;
    Clouds clouds;
    Extreme extreme;
    Date date;
    
    public WeatherWearGUI() throws APIException, IOException {
        initComponents();
        getWeatherData(6269531);
        setWeatherData();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        close = new javax.swing.JLabel();
        maximizer = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        search = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        City = new javax.swing.JLabel();
        DateTime = new javax.swing.JLabel();
        TempMM = new javax.swing.JLabel();
        Temp = new javax.swing.JLabel();
        HumidityLabel = new javax.swing.JLabel();
        Humidity = new javax.swing.JLabel();
        PressureLabel = new javax.swing.JLabel();
        Pressure = new javax.swing.JLabel();
        ICON = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cancel.png"))); // NOI18N
        close.setIcon(new ImageIcon(getClass().getResource("/cancel.png")));
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });

        maximizer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        maximizer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/maximize.png"))); // NOI18N
        maximizer.setIcon(new ImageIcon(getClass().getResource("/maximize.png")));
        maximizer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maximizerMouseClicked(evt);
            }
        });

        title.setBackground(new java.awt.Color(204, 153, 0));
        title.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        title.setForeground(new java.awt.Color(204, 153, 0));
        title.setText("Weather Wear");

        search.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/search.png"))); // NOI18N

        searchTextField.setBackground(new java.awt.Color(0, 0, 0));
        searchTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchTextField.setForeground(new java.awt.Color(255, 255, 255));
        searchTextField.setBorder(null);
        AutoSuggestor autoSuggestor = new AutoSuggestor(searchTextField, WeatherWearGUI.this, null, Color.WHITE, Color.BLACK, Color.RED, 1.0f) {
            @Override
            boolean wordTyped(String typedWord) {
                //create list for dictionary this in your case might be done via calling a method which queries db and returns results as arraylist
                ArrayList<String> words = new ArrayList<>();
                words.add("West Lafayette");
                words.add("Indianapolis");
                words.add("Chicago");
                words.add("Los Angeles");
                words.add("Paris");
                words.add("Kathmandu");

                setDictionary(words);
                //addToDictionary("bye");//adds a single word
                return super.wordTyped(typedWord);//now call super to check for any matches against newest dictionary
            }
        };

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(maximizer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(close))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(search)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(13, 13, 13)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maximizer)
                            .addComponent(close))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(search)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(title))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        City.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        City.setText("City");

        DateTime.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        DateTime.setText("DateTime");

        TempMM.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        TempMM.setText("TempMax TempMin");

        Temp.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        Temp.setText("Temp");

        HumidityLabel.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        HumidityLabel.setText("Humidity: ");

        Humidity.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        Humidity.setText("Humidity: ");

        PressureLabel.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        PressureLabel.setText("Pressure:");

        Pressure.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        Pressure.setText("Pressure");

        ICON.setText("ICON");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(City)
                        .addGap(49, 49, 49)
                        .addComponent(DateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Temp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(TempMM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(PressureLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Pressure))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(HumidityLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Humidity))))
                        .addGap(134, 134, 134)
                        .addComponent(ICON)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(City)
                    .addComponent(DateTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TempMM)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Temp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(ICON)))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HumidityLabel)
                    .addComponent(Humidity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PressureLabel)
                    .addComponent(Pressure))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getWeatherData(int id) throws APIException {
        CurrentWeather cwd = owm.currentWeatherByCityId(id);
        city = new City(cwd.getCityName(), cwd.getCityId());
        date = cwd.getDateTime();
        System.out.println(cwd.getWeatherList().get(0).getConditionId());
        weather.setId(cwd.getWeatherList().get(0).getConditionId());
        weather.setMain(cwd.getWeatherList().get(0).getMainInfo());
        weather.setDescription(cwd.getWeatherList().get(0).getDescription());
        weather.setIcon(cwd.getWeatherList().get(0).getIconLink());
        weather.setHumidity(cwd.getMainData().getHumidity());
        weather.setPressure(cwd.getMainData().getPressure());
        weather.setTemp(cwd.getMainData().getTemp());
        weather.setTemp_max(cwd.getMainData().getTempMax());
        weather.setTemp_min(cwd.getMainData().getTempMin());
        weather.setWind(new Wind(cwd.getWindData().getSpeed(), cwd.getWindData().getDegree()));
        if (weather.getId() < 300) {
            precipitation = new Precipitation(cwd.getRainData().getPrecipVol3h(), weather);
            thunderstorm = new Thunderstorm(precipitation, weather);
        } else if (weather.getId() < 400) {
//            precipitation = new Precipitation(weather);
//            precipitation.setPrecAmt(cwd.getRainData().getPrecipVol3h());
//            drizzle = new Drizzle(precipitation, weather);
        } else if (weather.getId() <  600) {
            precipitation = new Precipitation(cwd.getRainData().getPrecipVol3h(), weather);
            rain = new Rain(precipitation, weather);
        } else if (weather.getId() < 700) {
            precipitation = new Precipitation(weather);
            precipitation.setPrecAmt(cwd.getSnowData().getSnowVol3h());
            snow = new Snow(precipitation, weather);
        } else if (weather.getId() < 800) {
            atmosphere = new Atmosphere(weather);
        } else if (weather.getId() < 900) {
            clouds = new Clouds(cwd.getCloudData().getCloud(), weather);
        } else {
            extreme = new Extreme(weather);
        }
    }

    public void setWeatherData() throws MalformedURLException, IOException {
        URL url = new URL(weather.getIcon());
        Image image = ImageIO.read(url);
        City.setText(city.getCity());
        TempMM.setText("Day " + weather.temp_max + " / Night " + weather.temp_min);
        Temp.setText(String.valueOf(weather.getTemp()));
        Humidity.setText(String.valueOf(weather.getHumidity()) + "%");
        Pressure.setText(String.valueOf(weather.getPressure()));
        ICON.setIcon(new ImageIcon(image));
    }
    
    int xy;
    int xx;
    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        xx = evt.getX();
        xy = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x-xx,y-xy);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void maximizerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximizerMouseClicked
        if(maximized)
        {
            //handle fullscreen - taskbar
            WeatherWearGUI.this.setExtendedState(JFrame.MAXIMIZED_BOTH);
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            WeatherWearGUI.this.setMaximizedBounds(env.getMaximumWindowBounds());
            ii = new ImageIcon(getClass().getResource("/minimize.png"));
            maximizer.setIcon(ii);
            maximized = false;
        }
        else
        {

            setExtendedState(JFrame.NORMAL);
            ii = new ImageIcon(getClass().getResource("/maximize.png"));
            maximizer.setIcon(ii);
            maximized = true;
        }
    }//GEN-LAST:event_maximizerMouseClicked

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws APIException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherWearGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherWearGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherWearGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherWearGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new WeatherWearGUI().setVisible(true);
//            }
//        });
        WeatherWearGUI gui = new WeatherWearGUI();
        gui.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel City;
    private javax.swing.JLabel DateTime;
    private javax.swing.JLabel Humidity;
    private javax.swing.JLabel HumidityLabel;
    private javax.swing.JLabel ICON;
    private javax.swing.JLabel Pressure;
    private javax.swing.JLabel PressureLabel;
    private javax.swing.JLabel Temp;
    private javax.swing.JLabel TempMM;
    private javax.swing.JLabel close;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel maximizer;
    private javax.swing.JLabel search;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
